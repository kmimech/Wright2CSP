- FDR compression functions
     transparent diamond
     transparent normalise
-- Wright defined processes
     channel abstractEvent
     DFA = abstractEvent -> DFA |~| SKIP
     quant_semi({},_) = SKIP
     quant_semi(S,PARAM) = |~| i:S @ PARAM(i) ; quant_semi(diff(S,{i}),PARAM)
     power_set({}) = {{}}
     power_set(S) = { union(y,{x}) | x <- S, y <- power_set(diff(S,{x}))}
-- Style PipeConn
-- Type declarations
-- events for abstract specification
      channel readEOF, read, close, write
-- Connector Pipe
-- generated definitions (to split long sets)
     ALPHA_Pipe = {|Reader.readEOF, Reader.read, Reader.close, Writer.write , Writer.close|}
ReadOnly = ((Reader.read -> ReadOnly) [] ((Reader.readEOF -> (Reader.close -> SKIP)) [] (Reader.close -> SKIP))) WriteOnly = ((Writer.write -> WriteOnly) [] (Writer.close -> SKIP))
Glue = ((Writer.write -> Glue) [] ((Reader.read -> Glue) [] ((Writer.close
-> ReadOnly) [] (Reader.close -> WriteOnly))))
-- Rôle Writer
      ALPHA_Writer = {close, write}
      ROLEWriter = ((write -> Writer) |~| (close -> SKIP))
      WriterA = ROLEWriter [[ x <- abstractEvent | x <- ALPHA_Writer ]]
       assert DFA [FD= WriterA
-- Rôle Reader
      ALPHA_Reader = {readEOF, read, close}
      DoRead = ((read -> Reader) [] (readEOF -> ExitOnly))
      ExitOnly = (close -> SKIP)
      ROLEReader = (DoRead |~| ExitOnly)
      ReaderA = ROLEReader [[ x <- abstractEvent | x <- ALPHA_Reader ]]
      assert DFA [FD= ReaderA
      channel Writer: {close, write}
      channel Reader: {readEOF, read, close}
      Pipe = ( (ROLEWriter[[ x <- Writer.x | x <- {close, write } ]]
      [| diff({|Writer|}, {}) |]
    (ROLEReader[[ x <- Reader.x | x <- {readEOF, read, close } ]]
        [| diff({|Reader|}, {}) |] Glue)) )
        PipeA = Pipe [[ x <- abstractEvent | x <- ALPHA_Glue ]]
          assert DFA [FD= PipeA
-- No constraints
-- End Style
